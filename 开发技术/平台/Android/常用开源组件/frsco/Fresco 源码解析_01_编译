# Fresco 源码解析 01 编译

## 1.1 下载源码
建议 fork 一份源码到自己的仓库中, 这样在源码中做一些修改注释什么的都可以很好的提交到 github
使用如下 github 命令 可以有效的减少克隆时间
```
git clone git@github.com:crianzy/fresco.git --depth 1
```
这样只会 clone 最近一层的提交哦.

## 1.2 gradle build
在编译源码的是遇到的一些坑在这里说明一下.

编译这个项目还是比较费时的, 需要下载很多依赖包
本来想使用 GAE 的代理, 但是发现证书不被信任导致下载失败.

还有遇到一个编译错误的问题:
>Error:Execution failed for task ':static-webp:downloadLibwebp'.
> javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target

初步来看是在执行 :static-webp:downloadLibwebp 出了问题:
```
task downloadLibwebp(dependsOn: createNativeDepsDirectories, type: Download) {
    src 'https://github.com/webmproject/libwebp/archive/v0.4.3.tar.gz'
    onlyIfNewer true
    overwrite false
    dest downloadsDir
}
```
然后发现那是一个下载任务, 怀疑是因为之前用的是 GAE 代理,导致下载的文件不被信任?
之后把 onlyIfNewer 改为 false, 和 overwrite 改为 true 之后 重新编译之后通过了
编译完成后需要记得改回来, 不然每次都需要重新下载该文件

## 1.3 运行 demo
在 fresco 项目目录的 samples 目录下有多个项目可以运行.
这里我们先运行
如果上面 build 通过的话, 那么这里运行就没什么大问题.
这里主要要看一下 gradle 文件.

发现在 demo 项目的 gradle 文件中依然了很多东西
```
dependencies {
    provided "com.android.support:support-annotations:${SUPPORT_LIB_VERSION}"

    internalCompile project(':drawee-backends:drawee-pipeline')
    internalCompile project(':static-webp')
    internalCompile project(':animated-gif')
    internalCompile project(':animated-webp')

    // To get the core Fresco library only without animations or webp support
    mavenBasicCompile 'com.facebook.fresco:fresco:0.11.0'

    // To get the core Fresco library with webp support
    mavenWithWebpCompile 'com.facebook.fresco:fresco:0.11.0'
    mavenWithWebpCompile 'com.facebook.fresco:webpsupport:0.11.0'

    // To get the core Fresco library with webp support, including animated webp
    mavenWithAnimatedWebpCompile 'com.facebook.fresco:fresco:0.11.0'
    mavenWithAnimatedWebpCompile 'com.facebook.fresco:animated-webp:0.11.0'
    mavenWithAnimatedWebpCompile 'com.facebook.fresco:webpsupport:0.11.0'

    // To get the core Fresco library with animated gif support
    mavenWithAnimatedGifCompile 'com.facebook.fresco:fresco:0.11.0'
    mavenWithAnimatedGifCompile 'com.facebook.fresco:animated-gif:0.11.0'

    // To get the core Fresco library with webp, animated webp and animated gif support
    mavenWithAllAnimationsCompile 'com.facebook.fresco:fresco:0.11.0'
    mavenWithAllAnimationsCompile 'com.facebook.fresco:animated-gif:0.11.0'
    mavenWithAllAnimationsCompile 'com.facebook.fresco:animated-webp:0.11.0'
    mavenWithAllAnimationsCompile 'com.facebook.fresco:webpsupport:0.11.0'
}
```
然后看了下载 configurations 也配置了这些对应配置:
```
configurations {
    internalCompile
    mavenBasicCompile
    mavenWithWebpCompile
    mavenWithAnimatedWebpCompile
    mavenWithAnimatedGifCompile
    mavenWithAllAnimationsCompile
}
```
然后看到 productFlavors 也定义了相关的配置
```
productFlavors {
        // TO TEST THE REMOTE MODULES DURING A RELEASE, COMMENT OUT THE "internal" FLAVOR AND
        // UNCOMMENT THE REST OTHERWISE A CLASH OCCURS DUE TO THEM TRYING TO CREATE TASKS OF THE
        // SAME NAME
        internal

//        mavenBasic
//        mavenWithWebp
//        mavenWithAnimatedWebp
//        mavenWithAnimatedGif
//        mavenWithAllAnimations
    }
```
但是只有 internal 一个, 其他都被注释了
看到这里大家应该明白了,
找productFlavors 定义了相关的 Flavors , 那么在移动中可以针对该 Flavors 选择单独的依赖包
这样就可以做到的不同的Flavors 选用不同的依赖, 不用渠道选择不同的依赖.

这是鄙人第一次看到这样子的, 才疏学浅,才在这里说一下
相关文档:
https://docs.gradle.org/current/userguide/dependency_management.html#sub:configurations

# 1.4 demo 源码
demo 中源码很简单, 只有一个MainActivty
就是不同情况的使用 Fresco, 使用 fresco基本都能看懂, 这里不多做介绍
